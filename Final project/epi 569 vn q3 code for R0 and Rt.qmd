---
title: "epi 569 vn q3 code"
author: "Victoria Ngo"
format: html
editor: visual
---

## Loading packages

```{r}
library(dplyr)
library(EpiEstim) # For Rt estimation
```

## Loading dataset

```{r}
clean_merged_rff_2024 <- readRDS(here::here("Final project", "clean_merged_rff_2024.rds"))
```

## Plotting epi curve

Before performing R0 and Rt calculations, I am visualizing the epicurve

```{r}
epicurve <- as.data.frame(clean_merged_rff_2024 %>% group_by(Date_of_Onset) %>% summarize(Daily_Cases =n()))

plot1 <- ggplot(data=epicurve, aes(x=Date_of_Onset, y=Daily_Cases, labs=FALSE)) + 
  geom_bar(stat="identity", fill="steelblue") +
  scale_x_date(date_breaks = "7 days", date_labels = "%b %d") +
  scale_y_continuous(breaks = seq(0,15, by = 2)) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(x = "Symptom Onset Date", y = "Number of Cases", title = "Epi Curve for Rollins Fall Fever Outbreak")
plot1
```

## 1. Calculating R0

The equation I am using is the component method: R0 = alpha \* beta \* d

Where:

alpha = daily contact rate

beta = transmission probability

d = duration of infectiousness

### Calculating alpha

```{r}
# Calculate alpha (average exposure count per person per day)
# Assuming exposure_count represents the total exposures for a case during their infectious period
# Calculate the duration of exposure (in days) for each person
clean_merged_rff_2024 <- clean_merged_rff_2024 %>%
  mutate(
    exposure_duration = as.numeric(as.Date(Date_of_Recovery) - as.Date(date_of_exposure))
  )

# Calculate exposure count per day for each person
clean_merged_rff_2024 <- clean_merged_rff_2024 %>%
  mutate(
    exposure_per_day = exposure_count / exposure_duration
  )

# Calculate alpha (mean exposures per person per day)
alpha <- mean(clean_merged_rff_2024$exposure_per_day, na.rm = TRUE)

```

### Calculating beta

```{r}
# Estimate beta (probability of transmission per contact)
# Assuming beta can be approximated by infection_count/exposure_count for each case
summary_data <- clean_merged_rff_2024 %>%
  summarize(
    total_exposures = sum(exposure_count, na.rm = TRUE),
    total_infections = sum(infection_count, na.rm = TRUE)
  )

beta <- summary_data$total_infections / summary_data$total_exposures
```

### Calculating d

```{r}
# Calculate d (duration of infectiousness in days)
# Assuming symptom_onset_hours and symptom_recovery_hours can estimate the duration
clean_merged_rff_2024 <- clean_merged_rff_2024 %>%
  mutate(duration_days = symptom_recovery_hours / 24)

d <- mean(clean_merged_rff_2024$duration_days, na.rm = TRUE)
```

### Calculating R0

```{r}
# Calculate R0
R0 <- alpha * beta * d
print(paste("Estimated R0:", round(R0, 2)))
```

## 2. Calculating Rt

I will be using the Wallingaâ€“Teunis method utilizing the serial interval and symptom onset dates.

### Formatting data for Wallinga-Teunis method

```{r}
# Convert the data to a format that can be used in the EpiEstim wallinga_teunis function 
# Data must be in the following format: 
  # 1 column for symptom onset dates in ascending order, including dates on which 0 cases were reported, titled "dates"
  # 1 column for case counts (incidence) titled "I"

### Note: to calculate an Rt estimate for day day 1 of the outbreak, we must start our epi curve 2 days prior the first symptom onset date
epicurve2 <- epicurve %>% arrange(Date_of_Onset) %>% rename(dates = Date_of_Onset, DC = Daily_Cases)

all.dates <- as.data.frame(seq(as.Date("2019-10-14"), by = "day", length.out = 45))
names(all.dates) <- "dates"

epicurve.epiestim <- merge(x = epicurve2, y = all.dates, by = "dates", all = "True")
epicurve.epiestim <- epicurve.epiestim %>% mutate(DC = ifelse(is.na(DC), 0, DC)) 
```

### Calculating Serial Interval

```{r}
#serial interval
serial_interval <- clean_merged_rff_2024 %>%
  filter(!is.na(Infectedby)) %>%
  left_join(clean_merged_rff_2024, by = c("Infectedby" = "caseID"), suffix = c("", "_primary")) %>%
  mutate(Serial_Interval = as.numeric(Date_of_Onset - Date_of_Onset_primary)) 

summary_serial <- serial_interval %>%
  summarize(
    Min_Serial = min(Serial_Interval, na.rm = TRUE),
    Max_Serial = max(Serial_Interval, na.rm = TRUE),
    Mean_Serial = mean(Serial_Interval, na.rm = TRUE),
    Median_Serial = median(Serial_Interval, na.rm = TRUE)
  )
summary_serial
sd(serial_interval$Serial_Interval)
```

### Wallinga-Teunis RT estimate

```{r}
# Next, run the code below to estimate Rt, along with 95% confidence intervals for Rt estimates
# This requires that we specify the mean and standard deviation of the serial interval  
# An offset gamma distribution will be used for the serial interval (by default)
mean_si <- 2.96   
std_si <- 3.919905

estimates <- wallinga_teunis(epicurve.epiestim$I, 
                             method="parametric_si",
                             config = list(t_start = seq(3, 45), 
                                           t_end = seq(3, 45),
                                           mean_si = mean_si, 
                                           std_si = std_si, 
                                           n_sim = 1000))


# You can examine the serial interval distribution using the code below

plot(estimates$si_distr, xlab="Serial Interval (Days)", ylab="Proportion")
```

## Saving new dataset

```{r}
# Save Rt estimates to a file
write.csv(Rt_results$R, here::here("Final project", "Rt_estimates.csv"))
```
